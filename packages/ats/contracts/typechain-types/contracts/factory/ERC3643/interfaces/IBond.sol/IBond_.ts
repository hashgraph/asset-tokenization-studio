/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export declare namespace IBond_ {
  export type BondDetailsDataStruct = {
    currency: BytesLike;
    nominalValue: BigNumberish;
    startingDate: BigNumberish;
    maturityDate: BigNumberish;
  };

  export type BondDetailsDataStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    currency: string;
    nominalValue: BigNumber;
    startingDate: BigNumber;
    maturityDate: BigNumber;
  };

  export type CouponStruct = {
    recordDate: BigNumberish;
    executionDate: BigNumberish;
    rate: BigNumberish;
  };

  export type CouponStructOutput = [BigNumber, BigNumber, BigNumber] & {
    recordDate: BigNumber;
    executionDate: BigNumber;
    rate: BigNumber;
  };

  export type RegisteredCouponStruct = {
    coupon: IBond_.CouponStruct;
    snapshotId: BigNumberish;
  };

  export type RegisteredCouponStructOutput = [
    IBond_.CouponStructOutput,
    BigNumber
  ] & { coupon: IBond_.CouponStructOutput; snapshotId: BigNumber };

  export type CouponDetailsDataStruct = {
    couponFrequency: BigNumberish;
    couponRate: BigNumberish;
    firstCouponDate: BigNumberish;
  };

  export type CouponDetailsDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    couponFrequency: BigNumber;
    couponRate: BigNumber;
    firstCouponDate: BigNumber;
  };

  export type CouponForStruct = {
    tokenBalance: BigNumberish;
    rate: BigNumberish;
    recordDate: BigNumberish;
    executionDate: BigNumberish;
    decimals: BigNumberish;
    recordDateReached: boolean;
  };

  export type CouponForStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    boolean
  ] & {
    tokenBalance: BigNumber;
    rate: BigNumber;
    recordDate: BigNumber;
    executionDate: BigNumber;
    decimals: number;
    recordDateReached: boolean;
  };
}

export interface IBond_Interface extends utils.Interface {
  functions: {
    "getBondDetails()": FunctionFragment;
    "getCoupon(uint256)": FunctionFragment;
    "getCouponCount()": FunctionFragment;
    "getCouponDetails()": FunctionFragment;
    "getCouponFor(uint256,address)": FunctionFragment;
    "getCouponHolders(uint256,uint256,uint256)": FunctionFragment;
    "getTotalCouponHolders(uint256)": FunctionFragment;
    "redeemAtMaturityByPartition(address,bytes32,uint256)": FunctionFragment;
    "setCoupon((uint256,uint256,uint256))": FunctionFragment;
    "updateMaturityDate(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBondDetails"
      | "getCoupon"
      | "getCouponCount"
      | "getCouponDetails"
      | "getCouponFor"
      | "getCouponHolders"
      | "getTotalCouponHolders"
      | "redeemAtMaturityByPartition"
      | "setCoupon"
      | "updateMaturityDate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBondDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoupon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCouponCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCouponDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCouponFor",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCouponHolders",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCouponHolders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAtMaturityByPartition",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCoupon",
    values: [IBond_.CouponStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaturityDate",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBondDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCoupon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCouponCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouponDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouponFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCouponHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCouponHolders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAtMaturityByPartition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCoupon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMaturityDate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IBond_ extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IBond_Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBondDetails(
      overrides?: CallOverrides
    ): Promise<
      [IBond_.BondDetailsDataStructOutput] & {
        bondDetailsData_: IBond_.BondDetailsDataStructOutput;
      }
    >;

    getCoupon(
      _couponID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IBond_.RegisteredCouponStructOutput] & {
        registeredCoupon_: IBond_.RegisteredCouponStructOutput;
      }
    >;

    getCouponCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { couponCount_: BigNumber }>;

    getCouponDetails(
      overrides?: CallOverrides
    ): Promise<
      [IBond_.CouponDetailsDataStructOutput] & {
        couponDetails_: IBond_.CouponDetailsDataStructOutput;
      }
    >;

    getCouponFor(
      _couponID: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [IBond_.CouponForStructOutput] & {
        couponFor_: IBond_.CouponForStructOutput;
      }
    >;

    getCouponHolders(
      _couponID: BigNumberish,
      _pageIndex: BigNumberish,
      _pageLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { holders_: string[] }>;

    getTotalCouponHolders(
      _couponID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeemAtMaturityByPartition(
      _tokenHolder: string,
      _partition: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCoupon(
      _newCoupon: IBond_.CouponStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateMaturityDate(
      _maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  getBondDetails(
    overrides?: CallOverrides
  ): Promise<IBond_.BondDetailsDataStructOutput>;

  getCoupon(
    _couponID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IBond_.RegisteredCouponStructOutput>;

  getCouponCount(overrides?: CallOverrides): Promise<BigNumber>;

  getCouponDetails(
    overrides?: CallOverrides
  ): Promise<IBond_.CouponDetailsDataStructOutput>;

  getCouponFor(
    _couponID: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<IBond_.CouponForStructOutput>;

  getCouponHolders(
    _couponID: BigNumberish,
    _pageIndex: BigNumberish,
    _pageLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getTotalCouponHolders(
    _couponID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeemAtMaturityByPartition(
    _tokenHolder: string,
    _partition: BytesLike,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCoupon(
    _newCoupon: IBond_.CouponStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateMaturityDate(
    _maturityDate: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBondDetails(
      overrides?: CallOverrides
    ): Promise<IBond_.BondDetailsDataStructOutput>;

    getCoupon(
      _couponID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IBond_.RegisteredCouponStructOutput>;

    getCouponCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCouponDetails(
      overrides?: CallOverrides
    ): Promise<IBond_.CouponDetailsDataStructOutput>;

    getCouponFor(
      _couponID: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<IBond_.CouponForStructOutput>;

    getCouponHolders(
      _couponID: BigNumberish,
      _pageIndex: BigNumberish,
      _pageLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getTotalCouponHolders(
      _couponID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemAtMaturityByPartition(
      _tokenHolder: string,
      _partition: BytesLike,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCoupon(
      _newCoupon: IBond_.CouponStruct,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { success_: boolean; couponID_: BigNumber }
    >;

    updateMaturityDate(
      _maturityDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getBondDetails(overrides?: CallOverrides): Promise<BigNumber>;

    getCoupon(
      _couponID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCouponCount(overrides?: CallOverrides): Promise<BigNumber>;

    getCouponDetails(overrides?: CallOverrides): Promise<BigNumber>;

    getCouponFor(
      _couponID: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCouponHolders(
      _couponID: BigNumberish,
      _pageIndex: BigNumberish,
      _pageLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalCouponHolders(
      _couponID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemAtMaturityByPartition(
      _tokenHolder: string,
      _partition: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCoupon(
      _newCoupon: IBond_.CouponStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateMaturityDate(
      _maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBondDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCoupon(
      _couponID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCouponCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCouponDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCouponFor(
      _couponID: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCouponHolders(
      _couponID: BigNumberish,
      _pageIndex: BigNumberish,
      _pageLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalCouponHolders(
      _couponID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemAtMaturityByPartition(
      _tokenHolder: string,
      _partition: BytesLike,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCoupon(
      _newCoupon: IBond_.CouponStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateMaturityDate(
      _maturityDate: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
