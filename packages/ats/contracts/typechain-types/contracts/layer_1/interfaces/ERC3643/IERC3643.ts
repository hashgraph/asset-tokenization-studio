/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IERC3643Interface extends utils.Interface {
  functions: {
    "addAgent(address)": FunctionFragment;
    "batchBurn(address[],uint256[])": FunctionFragment;
    "batchForcedTransfer(address[],address[],uint256[])": FunctionFragment;
    "batchMint(address[],uint256[])": FunctionFragment;
    "batchTransfer(address[],uint256[])": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "compliance()": FunctionFragment;
    "forcedTransfer(address,address,uint256)": FunctionFragment;
    "identityRegistry()": FunctionFragment;
    "initialize_ERC3643(address,address)": FunctionFragment;
    "isAddressRecovered(address)": FunctionFragment;
    "isAgent(address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "onchainID()": FunctionFragment;
    "recoveryAddress(address,address,address)": FunctionFragment;
    "removeAgent(address)": FunctionFragment;
    "setCompliance(address)": FunctionFragment;
    "setIdentityRegistry(address)": FunctionFragment;
    "setName(string)": FunctionFragment;
    "setOnchainID(address)": FunctionFragment;
    "setSymbol(string)": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAgent"
      | "batchBurn"
      | "batchForcedTransfer"
      | "batchMint"
      | "batchTransfer"
      | "burn"
      | "compliance"
      | "forcedTransfer"
      | "identityRegistry"
      | "initialize_ERC3643"
      | "isAddressRecovered"
      | "isAgent"
      | "mint"
      | "onchainID"
      | "recoveryAddress"
      | "removeAgent"
      | "setCompliance"
      | "setIdentityRegistry"
      | "setName"
      | "setOnchainID"
      | "setSymbol"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addAgent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchBurn",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchForcedTransfer",
    values: [string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMint",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransfer",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "compliance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "forcedTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "identityRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize_ERC3643",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressRecovered",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isAgent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "onchainID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoveryAddress",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "removeAgent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setCompliance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIdentityRegistry",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOnchainID",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setSymbol", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batchBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchForcedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "compliance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forcedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialize_ERC3643",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAddressRecovered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAgent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onchainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoveryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIdentityRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOnchainID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSymbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "AgentAdded(address)": EventFragment;
    "AgentRemoved(address)": EventFragment;
    "ComplianceAdded(address)": EventFragment;
    "IdentityRegistryAdded(address)": EventFragment;
    "RecoverySuccess(address,address,address)": EventFragment;
    "UpdatedTokenInformation(string,string,uint8,string,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AgentAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AgentRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComplianceAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentityRegistryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverySuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedTokenInformation"): EventFragment;
}

export interface AgentAddedEventObject {
  _agent: string;
}
export type AgentAddedEvent = TypedEvent<[string], AgentAddedEventObject>;

export type AgentAddedEventFilter = TypedEventFilter<AgentAddedEvent>;

export interface AgentRemovedEventObject {
  _agent: string;
}
export type AgentRemovedEvent = TypedEvent<[string], AgentRemovedEventObject>;

export type AgentRemovedEventFilter = TypedEventFilter<AgentRemovedEvent>;

export interface ComplianceAddedEventObject {
  compliance: string;
}
export type ComplianceAddedEvent = TypedEvent<
  [string],
  ComplianceAddedEventObject
>;

export type ComplianceAddedEventFilter = TypedEventFilter<ComplianceAddedEvent>;

export interface IdentityRegistryAddedEventObject {
  identityRegistry: string;
}
export type IdentityRegistryAddedEvent = TypedEvent<
  [string],
  IdentityRegistryAddedEventObject
>;

export type IdentityRegistryAddedEventFilter =
  TypedEventFilter<IdentityRegistryAddedEvent>;

export interface RecoverySuccessEventObject {
  _lostWallet: string;
  _newWallet: string;
  _investorOnchainID: string;
}
export type RecoverySuccessEvent = TypedEvent<
  [string, string, string],
  RecoverySuccessEventObject
>;

export type RecoverySuccessEventFilter = TypedEventFilter<RecoverySuccessEvent>;

export interface UpdatedTokenInformationEventObject {
  newName: string;
  newSymbol: string;
  newDecimals: number;
  newVersion: string;
  newOnchainID: string;
}
export type UpdatedTokenInformationEvent = TypedEvent<
  [string, string, number, string, string],
  UpdatedTokenInformationEventObject
>;

export type UpdatedTokenInformationEventFilter =
  TypedEventFilter<UpdatedTokenInformationEvent>;

export interface IERC3643 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC3643Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAgent(
      _agent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    batchBurn(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    batchForcedTransfer(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    batchMint(
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    batchTransfer(
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    burn(
      _userAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    compliance(overrides?: CallOverrides): Promise<[string]>;

    forcedTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    identityRegistry(overrides?: CallOverrides): Promise<[string]>;

    initialize_ERC3643(
      _compliance: string,
      _identityRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isAddressRecovered(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAgent(_agent: string, overrides?: CallOverrides): Promise<[boolean]>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    onchainID(overrides?: CallOverrides): Promise<[string]>;

    recoveryAddress(
      _lostWallet: string,
      _newWallet: string,
      _investorOnchainID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeAgent(
      _agent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCompliance(
      _compliance: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setIdentityRegistry(
      _identityRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setName(
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOnchainID(
      _onchainID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSymbol(
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;
  };

  addAgent(
    _agent: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  batchBurn(
    _userAddresses: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  batchForcedTransfer(
    _fromList: string[],
    _toList: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  batchMint(
    _toList: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  batchTransfer(
    _toList: string[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  burn(
    _userAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  compliance(overrides?: CallOverrides): Promise<string>;

  forcedTransfer(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  identityRegistry(overrides?: CallOverrides): Promise<string>;

  initialize_ERC3643(
    _compliance: string,
    _identityRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isAddressRecovered(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAgent(_agent: string, overrides?: CallOverrides): Promise<boolean>;

  mint(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  onchainID(overrides?: CallOverrides): Promise<string>;

  recoveryAddress(
    _lostWallet: string,
    _newWallet: string,
    _investorOnchainID: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeAgent(
    _agent: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCompliance(
    _compliance: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setIdentityRegistry(
    _identityRegistry: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setName(
    _name: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOnchainID(
    _onchainID: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSymbol(
    _symbol: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addAgent(_agent: string, overrides?: CallOverrides): Promise<void>;

    batchBurn(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchForcedTransfer(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchMint(
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransfer(
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      _userAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    compliance(overrides?: CallOverrides): Promise<string>;

    forcedTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    identityRegistry(overrides?: CallOverrides): Promise<string>;

    initialize_ERC3643(
      _compliance: string,
      _identityRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isAddressRecovered(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAgent(_agent: string, overrides?: CallOverrides): Promise<boolean>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onchainID(overrides?: CallOverrides): Promise<string>;

    recoveryAddress(
      _lostWallet: string,
      _newWallet: string,
      _investorOnchainID: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAgent(_agent: string, overrides?: CallOverrides): Promise<void>;

    setCompliance(
      _compliance: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIdentityRegistry(
      _identityRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(_name: string, overrides?: CallOverrides): Promise<void>;

    setOnchainID(_onchainID: string, overrides?: CallOverrides): Promise<void>;

    setSymbol(_symbol: string, overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AgentAdded(address)"(_agent?: string | null): AgentAddedEventFilter;
    AgentAdded(_agent?: string | null): AgentAddedEventFilter;

    "AgentRemoved(address)"(_agent?: string | null): AgentRemovedEventFilter;
    AgentRemoved(_agent?: string | null): AgentRemovedEventFilter;

    "ComplianceAdded(address)"(
      compliance?: string | null
    ): ComplianceAddedEventFilter;
    ComplianceAdded(compliance?: string | null): ComplianceAddedEventFilter;

    "IdentityRegistryAdded(address)"(
      identityRegistry?: string | null
    ): IdentityRegistryAddedEventFilter;
    IdentityRegistryAdded(
      identityRegistry?: string | null
    ): IdentityRegistryAddedEventFilter;

    "RecoverySuccess(address,address,address)"(
      _lostWallet?: null,
      _newWallet?: null,
      _investorOnchainID?: null
    ): RecoverySuccessEventFilter;
    RecoverySuccess(
      _lostWallet?: null,
      _newWallet?: null,
      _investorOnchainID?: null
    ): RecoverySuccessEventFilter;

    "UpdatedTokenInformation(string,string,uint8,string,address)"(
      newName?: string | null,
      newSymbol?: string | null,
      newDecimals?: null,
      newVersion?: null,
      newOnchainID?: string | null
    ): UpdatedTokenInformationEventFilter;
    UpdatedTokenInformation(
      newName?: string | null,
      newSymbol?: string | null,
      newDecimals?: null,
      newVersion?: null,
      newOnchainID?: string | null
    ): UpdatedTokenInformationEventFilter;
  };

  estimateGas: {
    addAgent(
      _agent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    batchBurn(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    batchForcedTransfer(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    batchMint(
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    batchTransfer(
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    burn(
      _userAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    compliance(overrides?: CallOverrides): Promise<BigNumber>;

    forcedTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    identityRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    initialize_ERC3643(
      _compliance: string,
      _identityRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isAddressRecovered(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAgent(_agent: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    onchainID(overrides?: CallOverrides): Promise<BigNumber>;

    recoveryAddress(
      _lostWallet: string,
      _newWallet: string,
      _investorOnchainID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeAgent(
      _agent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCompliance(
      _compliance: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setIdentityRegistry(
      _identityRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setName(
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOnchainID(
      _onchainID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSymbol(
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAgent(
      _agent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    batchBurn(
      _userAddresses: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    batchForcedTransfer(
      _fromList: string[],
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    batchMint(
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    batchTransfer(
      _toList: string[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    burn(
      _userAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    compliance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forcedTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    identityRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize_ERC3643(
      _compliance: string,
      _identityRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isAddressRecovered(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAgent(
      _agent: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    onchainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoveryAddress(
      _lostWallet: string,
      _newWallet: string,
      _investorOnchainID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeAgent(
      _agent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCompliance(
      _compliance: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setIdentityRegistry(
      _identityRegistry: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setName(
      _name: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOnchainID(
      _onchainID: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSymbol(
      _symbol: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
