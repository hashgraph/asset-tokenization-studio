/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface IERC734Interface extends utils.Interface {
  functions: {
    "addKey(bytes32,uint256,uint256)": FunctionFragment;
    "approve(uint256,bool)": FunctionFragment;
    "execute(address,uint256,bytes)": FunctionFragment;
    "getKey(bytes32)": FunctionFragment;
    "getKeyPurposes(bytes32)": FunctionFragment;
    "getKeysByPurpose(uint256)": FunctionFragment;
    "keyHasPurpose(bytes32,uint256)": FunctionFragment;
    "removeKey(bytes32,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addKey"
      | "approve"
      | "execute"
      | "getKey"
      | "getKeyPurposes"
      | "getKeysByPurpose"
      | "keyHasPurpose"
      | "removeKey"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addKey",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getKey", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getKeyPurposes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeysByPurpose",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keyHasPurpose",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeKey",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKeyPurposes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeysByPurpose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keyHasPurpose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeKey", data: BytesLike): Result;

  events: {
    "Approved(uint256,bool)": EventFragment;
    "Executed(uint256,address,uint256,bytes)": EventFragment;
    "ExecutionFailed(uint256,address,uint256,bytes)": EventFragment;
    "ExecutionRequested(uint256,address,uint256,bytes)": EventFragment;
    "KeyAdded(bytes32,uint256,uint256)": EventFragment;
    "KeyRemoved(bytes32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyRemoved"): EventFragment;
}

export interface ApprovedEventObject {
  executionId: BigNumber;
  approved: boolean;
}
export type ApprovedEvent = TypedEvent<
  [BigNumber, boolean],
  ApprovedEventObject
>;

export type ApprovedEventFilter = TypedEventFilter<ApprovedEvent>;

export interface ExecutedEventObject {
  executionId: BigNumber;
  to: string;
  value: BigNumber;
  data: string;
}
export type ExecutedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  ExecutedEventObject
>;

export type ExecutedEventFilter = TypedEventFilter<ExecutedEvent>;

export interface ExecutionFailedEventObject {
  executionId: BigNumber;
  to: string;
  value: BigNumber;
  data: string;
}
export type ExecutionFailedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  ExecutionFailedEventObject
>;

export type ExecutionFailedEventFilter = TypedEventFilter<ExecutionFailedEvent>;

export interface ExecutionRequestedEventObject {
  executionId: BigNumber;
  to: string;
  value: BigNumber;
  data: string;
}
export type ExecutionRequestedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string],
  ExecutionRequestedEventObject
>;

export type ExecutionRequestedEventFilter =
  TypedEventFilter<ExecutionRequestedEvent>;

export interface KeyAddedEventObject {
  key: string;
  purpose: BigNumber;
  keyType: BigNumber;
}
export type KeyAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  KeyAddedEventObject
>;

export type KeyAddedEventFilter = TypedEventFilter<KeyAddedEvent>;

export interface KeyRemovedEventObject {
  key: string;
  purpose: BigNumber;
  keyType: BigNumber;
}
export type KeyRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  KeyRemovedEventObject
>;

export type KeyRemovedEventFilter = TypedEventFilter<KeyRemovedEvent>;

export interface IERC734 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC734Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addKey(
      _key: BytesLike,
      _purpose: BigNumberish,
      _keyType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approve(
      _id: BigNumberish,
      _approve: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    execute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    getKey(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string] & {
        purposes: BigNumber[];
        keyType: BigNumber;
        key: string;
      }
    >;

    getKeyPurposes(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _purposes: BigNumber[] }>;

    getKeysByPurpose(
      _purpose: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]] & { keys: string[] }>;

    keyHasPurpose(
      _key: BytesLike,
      _purpose: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    removeKey(
      _key: BytesLike,
      _purpose: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addKey(
    _key: BytesLike,
    _purpose: BigNumberish,
    _keyType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approve(
    _id: BigNumberish,
    _approve: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  execute(
    _to: string,
    _value: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  getKey(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber, string] & {
      purposes: BigNumber[];
      keyType: BigNumber;
      key: string;
    }
  >;

  getKeyPurposes(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getKeysByPurpose(
    _purpose: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  keyHasPurpose(
    _key: BytesLike,
    _purpose: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeKey(
    _key: BytesLike,
    _purpose: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addKey(
      _key: BytesLike,
      _purpose: BigNumberish,
      _keyType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      _id: BigNumberish,
      _approve: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKey(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber, string] & {
        purposes: BigNumber[];
        keyType: BigNumber;
        key: string;
      }
    >;

    getKeyPurposes(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getKeysByPurpose(
      _purpose: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    keyHasPurpose(
      _key: BytesLike,
      _purpose: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeKey(
      _key: BytesLike,
      _purpose: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Approved(uint256,bool)"(
      executionId?: BigNumberish | null,
      approved?: null
    ): ApprovedEventFilter;
    Approved(
      executionId?: BigNumberish | null,
      approved?: null
    ): ApprovedEventFilter;

    "Executed(uint256,address,uint256,bytes)"(
      executionId?: BigNumberish | null,
      to?: string | null,
      value?: BigNumberish | null,
      data?: null
    ): ExecutedEventFilter;
    Executed(
      executionId?: BigNumberish | null,
      to?: string | null,
      value?: BigNumberish | null,
      data?: null
    ): ExecutedEventFilter;

    "ExecutionFailed(uint256,address,uint256,bytes)"(
      executionId?: BigNumberish | null,
      to?: string | null,
      value?: BigNumberish | null,
      data?: null
    ): ExecutionFailedEventFilter;
    ExecutionFailed(
      executionId?: BigNumberish | null,
      to?: string | null,
      value?: BigNumberish | null,
      data?: null
    ): ExecutionFailedEventFilter;

    "ExecutionRequested(uint256,address,uint256,bytes)"(
      executionId?: BigNumberish | null,
      to?: string | null,
      value?: BigNumberish | null,
      data?: null
    ): ExecutionRequestedEventFilter;
    ExecutionRequested(
      executionId?: BigNumberish | null,
      to?: string | null,
      value?: BigNumberish | null,
      data?: null
    ): ExecutionRequestedEventFilter;

    "KeyAdded(bytes32,uint256,uint256)"(
      key?: BytesLike | null,
      purpose?: BigNumberish | null,
      keyType?: BigNumberish | null
    ): KeyAddedEventFilter;
    KeyAdded(
      key?: BytesLike | null,
      purpose?: BigNumberish | null,
      keyType?: BigNumberish | null
    ): KeyAddedEventFilter;

    "KeyRemoved(bytes32,uint256,uint256)"(
      key?: BytesLike | null,
      purpose?: BigNumberish | null,
      keyType?: BigNumberish | null
    ): KeyRemovedEventFilter;
    KeyRemoved(
      key?: BytesLike | null,
      purpose?: BigNumberish | null,
      keyType?: BigNumberish | null
    ): KeyRemovedEventFilter;
  };

  estimateGas: {
    addKey(
      _key: BytesLike,
      _purpose: BigNumberish,
      _keyType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approve(
      _id: BigNumberish,
      _approve: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    execute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    getKey(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getKeyPurposes(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeysByPurpose(
      _purpose: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyHasPurpose(
      _key: BytesLike,
      _purpose: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeKey(
      _key: BytesLike,
      _purpose: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addKey(
      _key: BytesLike,
      _purpose: BigNumberish,
      _keyType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approve(
      _id: BigNumberish,
      _approve: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    execute(
      _to: string,
      _value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getKey(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeyPurposes(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeysByPurpose(
      _purpose: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyHasPurpose(
      _key: BytesLike,
      _purpose: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeKey(
      _key: BytesLike,
      _purpose: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
